---
import {
  ArrowTurnLeftUpIcon,
  ArrowUturnLeftIcon,
  BackwardIcon,
} from "@heroicons/react/16/solid";
import { CodeIcon } from "@radix-ui/react-icons";
import { getCollection } from "astro:content";

const work = await getCollection("work");
const workSorted = work.sort((a, b) => {
  return new Date(b.data.date).getTime() - new Date(a.data.date).getTime();
});

// Prepare image data for client-side use
const workImageData = workSorted
  .filter((post) => post.data.published)
  .map((post) => ({
    id: post.id,
    title: post.data.title,
    image: post.data.image,
  }));

// Check if current path is home page
const isHomePage = Astro.url.pathname === "/";
---

<section class="md:fixed bottom-4 left-8">
  {
    isHomePage ? (
      <div>
        <h2>Work</h2>
        <ul class="link-selection">
          {workSorted
            .filter((post) => post.data.published)
            .map((post) => (
              <li class="group">
                <h3>
                  <a
                    href={`/${post.id}`}
                    class="work-link flex items-center gap-2 group-hover:text-[var(--color-accent)] transition-colors duration-300"
                    data-post-id={post.id}
                  >
                    <CodeIcon />
                    {post.data.title}
                  </a>
                </h3>
              </li>
            ))}
        </ul>
      </div>
    ) : (
      <div>
        <h2>
          <a href="/" class="hidden md:flex items-center gap-2">
            <ArrowUturnLeftIcon className="w-4 h-4" /> Back
          </a>
          <span class="md:hidden">Work</span>
        </h2>
        <ul class="link-selection md:hidden">
          {workSorted
            .filter(
              (post) =>
                post.data.published &&
                `/${post.id}` !== Astro.url.pathname.replace(/\/$/, "")
            )
            .map((post) => (
              <li class="group">
                <h3>
                  <a
                    href={`/${post.id}`}
                    class="work-link flex items-center gap-2 group-hover:text-[var(--color-accent)] transition-colors duration-300"
                    data-post-id={post.id}
                  >
                    <CodeIcon />
                    {post.data.title}
                  </a>
                </h3>
              </li>
            ))}
        </ul>
      </div>
    )
  }
</section>

<!-- Hover image container -->
<div
  id="hover-image-container"
  class="hidden md:flex fixed inset-0 pointer-events-none z-10 items-center justify-center opacity-0 transition-opacity duration-300"
>
  <div class="w-[60vw] h-auto">
    <img id="hover-image" src="" alt="" class="w-full h-auto rounded-xl" />
  </div>
</div>

<script define:vars={{ workImageData }}>
  // Function to attach hover event listeners
  function attachHoverListeners() {
    // Only attach listeners on medium screens and above
    if (window.innerWidth < 768) return;

    const workLinks = document.querySelectorAll(".work-link");
    const hoverContainer = document.getElementById("hover-image-container");
    const hoverImage = document.getElementById("hover-image");

    if (
      hoverContainer &&
      hoverImage &&
      hoverImage instanceof HTMLImageElement
    ) {
      workLinks.forEach((link) => {
        const postId = link.getAttribute("data-post-id");

        link.addEventListener("mouseenter", () => {
          // Find the image data for this post
          const postData = workImageData.find((post) => post.id === postId);
          if (postData && postData.image) {
            hoverImage.src = postData.image.src;
            hoverImage.alt = postData.title;
            hoverContainer.classList.remove("opacity-0");
            hoverContainer.classList.add("opacity-100");
          }
        });

        link.addEventListener("mouseleave", () => {
          hoverContainer.classList.remove("opacity-100");
          hoverContainer.classList.add("opacity-0");
        });
      });
    }
  }

  // Attach listeners on initial page load
  attachHoverListeners();

  // Re-attach listeners after view transitions
  document.addEventListener("astro:page-load", () => {
    attachHoverListeners();
  });

  // Re-attach listeners on window resize (in case user rotates device)
  window.addEventListener("resize", () => {
    attachHoverListeners();
  });
</script>
