---
import {
  CodeIcon,
  DashboardIcon,
  PieChartIcon,
  EnvelopeClosedIcon,
  GitHubLogoIcon,
  LinkedInLogoIcon,
} from "@radix-ui/react-icons";
import { getCollection } from "astro:content";
const work = await getCollection("work");
const workSorted = work.sort((a, b) => {
  return new Date(a.data.date).getTime() - new Date(b.data.date).getTime();
});

// Prepare image data for client-side use
const workImageData = workSorted
  .filter((post) => post.data.published)
  .map((post) => ({
    id: post.id,
    title: post.data.title,
    image: post.data.image,
  }));

// Check if current path is home page
const isHomePage = Astro.url.pathname === "/";
---

{
  isHomePage ? (
    <section class="hidden md:block px-2 pb-4 md:p-0 md:fixed md:bottom-4 md:left-8">
      <div>
        {/* <h2 data-animation-type="line">Work</h2> */}
        <ul class="link-selection" id="work-list">
          {workSorted
            .filter((post) => post.data.published)
            .map((post) => (
              <li class="group work-item">
                <h3>
                  <a
                    href={`/${post.id}`}
                    class="work-link flex items-center gap-2 group-hover:text-[var(--color-accent)] transition-colors duration-300"
                    data-post-id={post.id}
                  >
                    {post.data.icon === "dashboard" ? (
                      <DashboardIcon className="group-hover:text-[var(--color-accent)] transition-colors duration-300" />
                    ) : post.data.icon === "pie-chart" ? (
                      <PieChartIcon className="group-hover:text-[var(--color-accent)] transition-colors duration-300" />
                    ) : (
                      <CodeIcon className="group-hover:text-[var(--color-accent)] transition-colors duration-300" />
                    )}
                    {post.data.title}
                  </a>
                </h3>
              </li>
            ))}
          <li id="connect-line" class="group work-item" />
          <li class="group work-item">
            <h3>
              <a
                href="/connect"
                class="work-link flex items-center gap-2 group-hover:text-[var(--color-accent)] transition-colors duration-300"
              >
                <EnvelopeClosedIcon className="group-hover:text-[var(--color-accent)] transition-colors duration-300" />
                Connect
              </a>
            </h3>
          </li>
        </ul>
      </div>
    </section>
  ) : (
    <section class="hidden lg:block absolute bottom-0 left-0 px-2 pb-4 md:p-0 md:fixed md:bottom-4 md:left-8">
      <div>
        <ul class="link-selection">
          {workSorted
            .filter((post) => post.data.published)
            .map((post) => {
              const isCurrentPost =
                `/${post.id}` === Astro.url.pathname.replace(/\/$/, "");
              return (
                <li class="group">
                  <h3>
                    {isCurrentPost ? (
                      <div class="flex items-center gap-2 text-[var(--color-text)] py-1">
                        {post.data.icon === "dashboard" ? (
                          <DashboardIcon className="text-[var(--color-text)]" />
                        ) : post.data.icon === "pie-chart" ? (
                          <PieChartIcon className="text-[var(--color-text)]" />
                        ) : (
                          <CodeIcon className="text-[var(--color-text)]" />
                        )}
                        &nbsp;
                      </div>
                    ) : (
                      <a
                        href={`/${post.id}`}
                        class="work-link flex items-center gap-2 group-hover:text-[var(--color-accent)] transition-colors duration-300"
                      >
                        {post.data.icon === "dashboard" ? (
                          <DashboardIcon className="group-hover:text-[var(--color-accent)] transition-colors duration-300" />
                        ) : post.data.icon === "pie-chart" ? (
                          <PieChartIcon className="group-hover:text-[var(--color-accent)] transition-colors duration-300" />
                        ) : (
                          <CodeIcon className="group-hover:text-[var(--color-accent)] transition-colors duration-300" />
                        )}
                        &nbsp;
                      </a>
                    )}
                  </h3>
                </li>
              );
            })}
          <li id="connect-line" class="group w-1/2" />
          <li class="group">
            <h3>
              {Astro.url.pathname.replace(/\/$/, "") === "/connect" ? (
                <div class="flex items-center gap-2 text-[var(--color-text)] py-1">
                  <EnvelopeClosedIcon className="text-[var(--color-text)]" />
                  &nbsp;
                </div>
              ) : (
                <a
                  href="/connect"
                  class="work-link flex items-center gap-2 group-hover:text-[var(--color-accent)] transition-colors duration-300"
                >
                  <EnvelopeClosedIcon className="group-hover:text-[var(--color-accent)] transition-colors duration-300" />
                  &nbsp;
                </a>
              )}
            </h3>
          </li>
        </ul>
      </div>
    </section>
  )
}
<section
  class={`my-4 md:p-0 lg:hidden ${isHomePage ? "md:hidden absolute bottom-0 left-0 px-2" : ""} w-full`}
>
  <div>
    <h2 data-animation-type="line">Work</h2>
    <ul class="link-selection gap-2" id="work-list">
      {
        workSorted
          .filter(
            (post) =>
              post.data.published &&
              `/${post.id}` !== Astro.url.pathname.replace(/\/$/, "")
          )
          .map((post) => (
            <li class="group work-item bg-[var(--color-accent)]/10 hover:bg-[var(--color-accent)]/5 pl-4 rounded-lg">
              <h3>
                <a
                  href={`/${post.id}`}
                  class="work-link flex items-center gap-2 group-hover:text-[var(--color-accent)] transition-colors duration-300"
                >
                  {post.data.icon === "dashboard" ? (
                    <DashboardIcon className="group-hover:text-[var(--color-accent)] transition-colors duration-300" />
                  ) : post.data.icon === "pie-chart" ? (
                    <PieChartIcon className="group-hover:text-[var(--color-accent)] transition-colors duration-300" />
                  ) : (
                    <CodeIcon className="group-hover:text-[var(--color-accent)] transition-colors duration-300" />
                  )}
                  {post.data.title}
                </a>
              </h3>
            </li>
          ))
      }
    </ul>
  </div>
  {
    Astro.url.pathname.replace(/\/$/, "") === "/connect" ? (
      ""
    ) : (
      <div class="mt-8">
        <h2 data-animation-type="line">Connect</h2>
        <ul class="link-selection gap-2">
          <li class="group work-item bg-[var(--color-accent)]/10 hover:bg-[var(--color-accent)]/5 pl-4 rounded-lg">
            <h3>
              <a
                href="/connect"
                class="work-link flex items-center gap-2 group-hover:text-[var(--color-accent)] transition-colors duration-300"
              >
                <EnvelopeClosedIcon className="group-hover:text-[var(--color-accent)] transition-colors duration-300" />
                Message
              </a>
            </h3>
          </li>
          <li class="group work-item bg-[var(--color-accent)]/10 hover:bg-[var(--color-accent)]/5 pl-4 rounded-lg">
            <h3>
              <a
                href="https://github.com/ephnagler"
                class="work-link flex items-center gap-2 group-hover:text-[var(--color-accent)] transition-colors duration-300"
                target="_blank"
                rel="noopener noreferrer"
              >
                <GitHubLogoIcon className="group-hover:text-[var(--color-accent)] transition-colors duration-300" />
                GitHub
              </a>
            </h3>
          </li>
          <li class="group work-item bg-[var(--color-accent)]/10 hover:bg-[var(--color-accent)]/5 pl-4 rounded-lg">
            <h3>
              <a
                href="https://www.linkedin.com/in/ephriam-nagler/"
                class="work-link flex items-center gap-2 group-hover:text-[var(--color-accent)] transition-colors duration-300"
                target="_blank"
                rel="noopener noreferrer"
              >
                <LinkedInLogoIcon className="group-hover:text-[var(--color-accent)] transition-colors duration-300" />
                LinkedIn
              </a>
            </h3>
          </li>
        </ul>
      </div>
    )
  }
</section>

<!-- Hover image container -->
<div
  id="hover-image-container"
  class="hidden md:flex fixed inset-0 pointer-events-none z-10 items-center justify-center translate-y-4 opacity-100 transition-all duration-300"
>
  <!-- Images will be loaded dynamically on first hover -->
</div>

<script define:vars={{ workImageData }}>
  // Track loaded images for lazy loading
  let loadedImages = new Set();
  let hoverImages = [];
  let isInitialized = false;

  // Function to load image on first hover
  function loadImage(postId) {
    if (loadedImages.has(postId)) return;

    const post = workImageData.find((p) => p.id === postId);
    if (!post) return;

    const hoverContainer = document.getElementById("hover-image-container");
    if (!hoverContainer) return;

    const img = document.createElement("img");
    img.src = post.image.src;
    img.alt = post.title;
    img.className =
      "w-[90vw] lg:w-[75vw] xl:w-[60vw] h-auto rounded-xl work-hover-image absolute opacity-0 transition-all duration-300 saturate-20 brightness-75 shadow-none";
    img.setAttribute("data-post-id", postId);
    img.loading = "lazy"; // Add lazy loading attribute

    hoverContainer.appendChild(img);
    hoverImages.push(img);
    loadedImages.add(postId);
  }

  // Function to clean up hover system
  function cleanupHoverSystem() {
    // Remove all hover images
    const hoverContainer = document.getElementById("hover-image-container");
    if (hoverContainer) {
      hoverContainer.innerHTML =
        "<!-- Images will be loaded dynamically on first hover -->";
    }

    // Reset state
    loadedImages.clear();
    hoverImages = [];
    isInitialized = false;
  }

  // Function to attach hover event listeners
  function attachHoverListeners() {
    // Prevent multiple initializations
    if (isInitialized) return;

    // Only attach listeners on medium screens and above
    if (window.innerWidth < 768) return;

    const workLinks = document.querySelectorAll(".work-link");
    const hoverContainer = document.getElementById("hover-image-container");
    const workList = document.getElementById("work-list");

    if (hoverContainer && workList) {
      // Work list hover - controls translate animation
      workList.addEventListener("mouseenter", () => {
        hoverContainer.classList.remove("translate-y-4");
        hoverContainer.classList.add("translate-y-0");
      });

      workList.addEventListener("mouseleave", () => {
        hoverContainer.classList.remove("translate-y-0");
        hoverContainer.classList.add("translate-y-4");
      });

      // Individual link hovers - control image opacity
      workLinks.forEach((link) => {
        const postId = link.getAttribute("data-post-id");
        if (!postId) return;

        link.addEventListener("mouseenter", () => {
          // Load image if not already loaded
          loadImage(postId);

          // Hide all images first
          hoverImages.forEach((img) => {
            img.classList.remove(
              "opacity-100",
              "shadow-[0_0_30px_var(--color-bg)]"
            );
            img.classList.add("opacity-0", "shadow-none");
          });

          // Show the corresponding image
          const targetImage = document.querySelector(
            `.work-hover-image[data-post-id="${postId}"]`
          );
          if (targetImage) {
            targetImage.classList.remove("opacity-0", "shadow-none");
            targetImage.classList.add(
              "opacity-100",
              "shadow-[0_0_30px_var(--color-bg)]"
            );
          }
        });

        link.addEventListener("mouseleave", () => {
          // Hide all images when leaving a link
          hoverImages.forEach((img) => {
            img.classList.remove(
              "opacity-100",
              "shadow-[0_0_30px_var(--color-bg)]"
            );
            img.classList.add("opacity-0", "shadow-none");
          });
        });
      });

      isInitialized = true;
    }
  }

  // Attach listeners on initial page load
  attachHoverListeners();

  // Clean up and re-attach listeners after view transitions
  document.addEventListener("astro:page-load", () => {
    cleanupHoverSystem();
    // Small delay to ensure DOM is ready
    setTimeout(attachHoverListeners, 50);
  });

  // Re-attach listeners on window resize (in case user rotates device)
  window.addEventListener("resize", () => {
    if (window.innerWidth >= 768) {
      cleanupHoverSystem();
      attachHoverListeners();
    }
  });

  // Work menu animation system
  function setupWorkAnimations() {
    const workItems = document.querySelectorAll(".work-item");
    const viewportHeight = window.innerHeight;

    workItems.forEach((item, index) => {
      const htmlItem = item;
      const rect = htmlItem.getBoundingClientRect();
      const isInViewport = rect.top < viewportHeight && rect.bottom > 0;
      const isHidden =
        htmlItem.offsetParent === null ||
        htmlItem.closest('[class*="hidden"]') !== null; // Check if element is hidden

      if (isInViewport || isHidden) {
        // If already visible (or hidden due to responsive state), animate immediately
        htmlItem.classList.add("animate-visible");
      } else {
        // Element is not in viewport - set up for scroll animation
        // Don't set data-animation-type to avoid conflicts with unified system
      }
    });

    // Use the unified animation system for elements not in viewport
    workItems.forEach((item) => {
      const htmlItem = item;
      const rect = htmlItem.getBoundingClientRect();
      const isInViewport = rect.top < viewportHeight && rect.bottom > 0;
      const isHidden =
        htmlItem.offsetParent === null ||
        htmlItem.closest('[class*="hidden"]') !== null;

      if (!isInViewport && !isHidden) {
        // Let the unified system handle this element
        htmlItem.dataset.animationType = "content";
      }
    });

    // Safety check: if items are in viewport but not animated after 1 second, force animate immediately
    setTimeout(() => {
      const unanimatedItems = document.querySelectorAll(
        ".work-item:not(.animate-visible)"
      );
      const viewportHeight = window.innerHeight;

      unanimatedItems.forEach((item, index) => {
        const rect = item.getBoundingClientRect();
        const isInViewport = rect.top < viewportHeight && rect.bottom > 0;

        // Only force animate if the item is actually in the viewport
        if (isInViewport) {
          item.classList.add("animate-visible");
        }
      });
    }, 1000);
  }

  // Handle work menu animations
  document.addEventListener("astro:page-load", () => {
    setTimeout(setupWorkAnimations, 200); // Small delay to ensure DOM is ready
  });

  // Initial page load
  setTimeout(setupWorkAnimations, 100);
</script>
