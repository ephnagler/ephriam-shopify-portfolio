---
import Layout from "../layouts/Layout.astro";
import {
  PaperPlaneIcon,
  GitHubLogoIcon,
  LinkedInLogoIcon,
} from "@radix-ui/react-icons";
---

<Layout page_title="Contact">
  <div
    class="work-container max-w-screen-md lg:h-screen flex flex-col items-center gap-4 mx-auto px-2"
  >
    <h1 class="mb-0">Let's Connect</h1>
    <div class="grid grid-cols-2 gap-4">
      <div
        class="flex gap-2 items-center px-8 py-4 bg-[var(--color-accent)]/10 hover:bg-[var(--color-accent)]/20 outline-1 outline-[var(--color-accent)]/50 hover:outline-[var(--color-text)] rounded-lg relative hover:-translate-y-0.5 transition-transform duration-300"
      >
        <GitHubLogoIcon />GitHub<a
          href="https://github.com/ephnagler"
          class="absolute inset-0"
          target="_blank"
          rel="noopener noreferrer"></a>
      </div>
      <div
        class="flex gap-2 items-center px-8 py-4 bg-[var(--color-accent)]/10 hover:bg-[var(--color-accent)]/20 outline-1 outline-[var(--color-accent)]/50 hover:outline-[var(--color-text)] rounded-lg relative hover:-translate-y-0.5 transition-transform duration-300"
      >
        <LinkedInLogoIcon />LinkedIn<a
          href="https://www.linkedin.com/in/ephriam-nagler/"
          class="absolute inset-0"
          target="_blank"
          rel="noopener noreferrer"></a>
      </div>
    </div>
    <div
      class="w-full flex flex-col justify-center gap-4 p-4 md:p-8 rounded-lg"
    >
      <form
        id="my-form"
        action="https://formspree.io/f/mwpldbjl"
        method="POST"
        class="flex flex-col gap-4"
      >
        <label class="floating-label">
          <span>Name</span>
          <input
            type="text"
            class="input input-md"
            id="name"
            name="name"
            required
          />
        </label>

        <label class="floating-label">
          <span>Email</span>
          <input
            type="email"
            class="input input-md"
            id="email"
            name="email"
            required
          />
        </label>

        <label class="floating-label">
          <span>Message</span>
          <textarea
            id="message"
            name="message"
            rows="5"
            class="textarea textarea-md"
            required></textarea>
        </label>

        <div id="my-form-status" class="form-status"></div>

        <button
          type="submit"
          class="group bg-accent/10 flex items-center gap-2 px-8 py-4 rounded-lg bg-[var(--color-accent)]/10 outline-1 outline-[var(--color-accent)]/50 hover:outline-[var(--color-text)] transition-colors duration-300 cursor-pointer w-fit self-end"
        >
          Send <PaperPlaneIcon
            className="group-hover:translate-x-1 group-hover:text-[var(--color-text)] transition-transform duration-200"
          />
        </button>
      </form>
    </div>
  </div>
</Layout>

<style>
  .form-group {
    margin-bottom: 1.5rem;
  }

  input,
  textarea {
    width: 100%;
    padding: 0.75rem;
    border: 1px solid var(--color-accent);
    border-radius: 0.375rem;
    background-color: var(--color-base-200);
    color: var(--color-content);
  }

  .form-status {
    margin-bottom: 1rem;
    padding: 0.75rem;
    border-radius: 0.375rem;
    display: none;
  }

  .form-status.success {
    display: block;
    background-color: #003848;
    color: #b6ecf7;
  }

  .form-status.error {
    display: block;
    background-color: #37172f;
    color: #d6409f;
  }
</style>

<script>
  const form = document.getElementById("my-form") as HTMLFormElement;
  const status = document.getElementById("my-form-status") as HTMLDivElement;

  if (form && status) {
    async function handleSubmit(event: SubmitEvent) {
      event.preventDefault();
      const formElement = event.target as HTMLFormElement;
      const data = new FormData(formElement);

      try {
        const response = await fetch(formElement.action, {
          method: form.method,
          body: data,
          headers: {
            Accept: "application/json",
          },
        });

        if (response.ok) {
          status.innerHTML =
            "Thanks for reaching out! I'll get back to you soon.";
          status.className = "form-status success";
          form.reset();
        } else {
          const data = await response.json();
          if (Object.hasOwn(data, "errors")) {
            status.innerHTML = data["errors"]
              .map((error: { message: string }) => error.message)
              .join(", ");
          } else {
            status.innerHTML = "Oops! There was a problem submitting your form";
          }
          status.className = "form-status error";
        }
      } catch (error) {
        status.innerHTML = "Oops! There was a problem submitting your form";
        status.className = "form-status error";
      }
    }

    form.addEventListener("submit", handleSubmit);
  }
</script>
